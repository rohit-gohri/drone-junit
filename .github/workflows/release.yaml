name: "Release"

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  changeset:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: "yarn"

      - name: Install Dependencies
        run: yarn

      - name: Create Release Pull Request
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v3
        with:
          go-version: "^1.18.4"

      - run: go version

      - run: sh ./scripts/build.sh

      - name: Check if tag already exists
        run: |
          # Get version from package.json (head is needed because this also returns "version" npm script line)
          sed -n '/version/s/,*\r*$//p' package.json | cut -d ':' -f2,3 | sed -e 's/^ "//' -e 's/"$//' | head -n 1 > app_version.tmp
          cat app_version.tmp | cut -d. -f1 > major_version.tmp

          export VERSION_TAG="v$(cat app_version.tmp)"
          echo "package_version=$(cat app_version.tmp)" >> $GITHUB_ENV
          echo "major_version=$(cat major_version.tmp)" >> $GITHUB_ENV

          # Check if tag already exists
          if [ $(git tag -l "$VERSION_TAG") ]; then
              echo "Tag already exists, please increment version to create release"
              echo "create_release=no" >> $GITHUB_ENV
          else
              echo "create_release=yes" >> $GITHUB_ENV
          fi

      - name: Docker meta Release
        if: ${{ env.create_release == 'yes' }}
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            boringdownload/drone-junit
            ghcr.io/rohit-gohri/drone-junit
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=v${{ env.package_version }}
            type=semver,pattern=v{{major}},value=v${{ env.package_version }}
            type=sha

      - name: Docker meta Alpha
        if: ${{ env.create_release == 'no' }}
        id: meta-alpha
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            boringdownload/drone-junit
            ghcr.io/rohit-gohri/drone-junit
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=alpha
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: ðŸ›‚ Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: ðŸ›‚ Log in to the Github Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: ðŸ”¨ðŸš€ Build and push Release
        if: ${{ env.create_release == 'yes' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: ðŸ”¨ðŸš€ Build and push Alpha
        if: ${{ env.create_release == 'no' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.meta-alpha.outputs.tags }}
          labels: ${{ steps.meta-alpha.outputs.labels }}

      - name: Changelog
        if: ${{ env.create_release == 'yes' }}
        run: |
          cat CHANGELOG.md | grep -Pzo "## ${{ env.package_version }}\s+((.|\n)+?)(?=\n##\s)" | head -n -1 | tail -n +3 > latest-CHANGELOG.md

      - name: Release
        uses: softprops/action-gh-release@master
        if: ${{ env.create_release == 'yes' }}
        with:
          body_path: latest-CHANGELOG.md
          name: v${{ env.package_version }}
          tag_name: v${{ env.package_version }}
          target_commitish: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
